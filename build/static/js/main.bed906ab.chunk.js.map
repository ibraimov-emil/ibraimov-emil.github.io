{"version":3,"sources":["assets/z_helmet.glb","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Model","useState","gltf","set","useMemo","GLTFLoader","load","helmetSrc","Helmet","scene","getObjectByName","position","object","App","faceTrackerGroup","useRef","pipeline","Pipeline","userFacing","rearCameraMirrorMode","ref","fallback","trackerGroup","intensity","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+LAAe,MAA0B,qC,QCezC,SAASA,IACP,MAAoBC,qBAApB,mBAAOC,EAAP,KAAaC,EAAb,KAGA,GAFAC,mBAAQ,kBAAM,IAAIC,KAAaC,KAAKC,EAAWJ,EAAvC,GAA6C,IAEjDD,EAAM,CACR,IACMM,EADYN,EAAVO,MACaC,gBAAgB,UACrC,OAAO,2BAAWC,SAAU,CAAC,KAAO,KAAM,IAAMC,OAAQJ,GACzD,CACD,OAAO,IACR,CAqBcK,MAnBf,WACE,IAAMC,EAAmBC,mBACnBC,EAAW,IAAIC,WACrB,OACE,eAAC,eAAD,WACE,cAAC,eAAD,CAAcD,SAAUA,EAAUE,YAAU,EAACC,qBAAqB,QAClE,cAAC,cAAD,CAAaC,IAAKN,EAAkBE,SAAUA,EAA9C,SACE,eAAC,WAAD,CAAUK,SAAU,KAApB,UACE,cAAC,eAAD,CAAcC,aAAcR,IAC5B,cAACd,EAAD,SAGJ,8BAAcuB,UAAW,KACzB,kCAAkBZ,SAAU,CAAC,IAAK,EAAG,GAAIY,UAAW,MACpD,cAAC,SAAD,MAGL,EC9BcC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,EACT,GAEJ,ECNDQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,G","file":"static/js/main.bed906ab.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/z_helmet.c48a3d10.glb\";","import React, {\r\n Suspense, useMemo, useRef, useState,\r\n} from 'react';\r\nimport { GLTF, GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\r\nimport {\r\n  FaceTracker,\r\n  HeadMaskMesh,\r\n  ZapparCamera,\r\n  ZapparCanvas,\r\n  Loader,\r\n  Pipeline,\r\n  Types\r\n} from '@zappar/zappar-react-three-fiber';\r\nimport helmetSrc from './assets/z_helmet.glb';\r\n\r\nfunction Model() {\r\n  const [gltf, set] = useState<GLTF>();\r\n  useMemo(() => new GLTFLoader().load(helmetSrc, set), []);\r\n\r\n  if (gltf) {\r\n    const { scene } = gltf;\r\n    const Helmet = scene.getObjectByName('Helmet');\r\n    return <primitive position={[0.25, -1.25, 0.1]} object={Helmet} />;\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction App() {\r\n  const faceTrackerGroup = useRef<Types.FaceAnchorGroup>();\r\n  const pipeline = new Pipeline();\r\n  return (\r\n    <ZapparCanvas>\r\n      <ZapparCamera pipeline={pipeline} userFacing rearCameraMirrorMode=\"css\" />\r\n      <FaceTracker ref={faceTrackerGroup} pipeline={pipeline}>\r\n        <Suspense fallback={null}>\r\n          <HeadMaskMesh trackerGroup={faceTrackerGroup} />\r\n          <Model />\r\n        </Suspense>\r\n      </FaceTracker>\r\n      <ambientLight intensity={0.6} />\r\n      <directionalLight position={[2.5, 8, 5]} intensity={1.5} />\r\n      <Loader />\r\n    </ZapparCanvas>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}